name: Run Decoder

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  run-decoder:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      # 1️. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️. Download Amazon dataset from GitHub Release
      - name: Fetch amazon0302.pkl from GitHub Release
        run: |
          echo " Downloading amazon0302.pkl from GitHub Releases..."
          wget -O amazon0302.pkl https://github.com/Samrawitgebremaryam/neural-subgraph-matcher-miner/releases/download/v1.0/amazon0302.pkl
          
          echo " Verifying downloaded file..."
          file amazon0302.pkl

          FILE_SIZE=$(stat -c%s amazon0302.pkl)
          echo "File size: $FILE_SIZE bytes"

          if [ $FILE_SIZE -lt 100000 ]; then
            echo " ERROR: amazon0302.pkl is too small. Likely not downloaded correctly!"
            exit 1
          fi

          if file amazon0302.pkl | grep -Eq "HTML|ASCII|Unicode"; then
            echo " ERROR: amazon0302.pkl is not a valid binary file!"
            exit 1
          fi
          echo " amazon0302.pkl verified as binary."

      # 3️. Pull Docker image
      - name: Pull prebuilt Docker image
        run: |
          echo " Logging into Docker Hub..."
          docker login -u samribahta -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          echo " Pulling latest decoder image..."
          docker pull samribahta/decoder-image:latest

      # 4️. Create output directories
      - name: Create output directories
        run: |
          mkdir -p ${{ github.workspace }}/plots/cluster
          mkdir -p ${{ github.workspace }}/results
          chmod -R 755 ${{ github.workspace }}/plots
          chmod -R 755 ${{ github.workspace }}/results

      # 5️. Run decoder 
      - name: Run decoder in Docker container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -e PYTHONUNBUFFERED=1 \
            samribahta/decoder-image:latest \
            bash -c "
              set -e
              echo 'Starting decoder run on Amazon dataset...' > decoder.log 2> decoder.err
              echo 'Running decoder with default settings...' >> decoder.log
              python -m subgraph_mining.decoder \
                --dataset=amazon0302.pkl \
                --n_trials=200 \
                --node_anchored \
                --out_path=/app/results/amazon_patterns.pkl \
                --graph_type=directed \
                --analyze  # Add --analyze if visualization is tied to this flag
                >> decoder.log 2>> decoder.err
              echo 'Decoder finished successfully.' >> decoder.log

              # Check if patterns were generated
              if [ -f /app/results/amazon_patterns.pkl ]; then
                echo 'Pattern file amazon_patterns.pkl generated successfully.' >> decoder.log
              else
                echo 'ERROR: Pattern file amazon_patterns.pkl not found!' >> decoder.log
              fi

              # Check for plot files
              echo 'Checking output directories...' >> decoder.log
              if ls /app/plots/cluster/*.png >/dev/null 2>> decoder.err; then
                echo 'Plot files (.png) found in plots/cluster:' >> decoder.log
                ls -la /app/plots/cluster/*.png >> decoder.log 2>> decoder.err
              else
                echo 'WARNING: No .png plot files found in plots/cluster!' >> decoder.log
              fi
              if ls /app/plots/cluster/*.pdf >/dev/null 2>> decoder.err; then
                echo 'Plot files (.pdf) found in plots/cluster:' >> decoder.log
                ls -la /app/plots/cluster/*.pdf >> decoder.log 2>> decoder.err
              else
                echo 'WARNING: No .pdf plot files found in plots/cluster!' >> decoder.log
              fi
              ls -la /app/results >> decoder.log 2>> decoder.err
            "

      # 6️. Validate visualization output
      - name: Validate visualization output
        if: always()
        run: |
          echo "Validating visualization output..."
          if [ -d ${{ github.workspace }}/plots/cluster ] && find ${{ github.workspace }}/plots/cluster -type f | grep -q .; then
            echo "Visualization successful: Plot files detected in plots/cluster."
            find ${{ github.workspace }}/plots/cluster -type f
          else
            echo "ERROR: No plot files found in plots/cluster!"
            exit 1
          fi

      # 7. Upload results and plots as artifact
      - name: Upload results and plots as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: amazon-decoder-results
          path: |
            plots/
            results/
          retention-days: 30
          if-no-files-found: warn

      # 8. Upload logs
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: amazon-decoder-logs
          path: |
            decoder.log
            decoder.err
          retention-days: 7
          if-no-files-found: ignore