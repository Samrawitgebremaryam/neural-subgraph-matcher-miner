name: Run Decoder

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  run-decoder:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Install gdown and download Amazon dataset
      - name: Fetch amazon0302.pkl using gdown
        env:
          GDRIVE_FILE_ID: ${{ secrets.GDRIVE_FILE_ID }}
        run: |
          echo "üì• Installing gdown..."
          python3 -m pip install --upgrade --user gdown

          echo "üì• Downloading amazon0302.pkl from Google Drive..."
          python3 -m gdown.cli --id $GDRIVE_FILE_ID -O amazon0302.pkl

          echo "üîç Verifying downloaded file..."
          file amazon0302.pkl

          if file amazon0302.pkl | grep -Eq "HTML|ASCII|Unicode"; then
            echo "‚ùå ERROR: amazon0302.pkl is not a valid binary file!"
            exit 1
          fi
          echo "‚úÖ amazon0302.pkl verified as binary."

      # 3Ô∏è‚É£ Pull Docker image
      - name: Pull prebuilt Docker image
        run: |
          echo "üê≥ Logging into Docker Hub..."
          docker login -u samribahta -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          echo "üì¶ Pulling latest decoder image..."
          docker pull samribahta/decoder-image:latest

      # 4Ô∏è‚É£ Create output directories
      - name: Create output directories
        run: |
          mkdir -p ${{ github.workspace }}/plots/cluster
          mkdir -p ${{ github.workspace }}/results
          mkdir -p ${{ github.workspace }}/ckpt
          chmod -R 777 ${{ github.workspace }}/plots
          chmod -R 777 ${{ github.workspace }}/results
          chmod -R 777 ${{ github.workspace }}/ckpt

      # 5Ô∏è‚É£ Run matcher (train model)
      - name: Run matcher in Docker container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -e PYTHONUNBUFFERED=1 \
            samribahta/decoder-image:latest \
            bash -c "
              set -e
              echo 'üöÄ Starting matcher run on Amazon dataset...'
              python -m subgraph_matching.train \
                --dataset=graph \
                --graph_pkl_path=amazon0302.pkl \
                --node_anchored \
                --batch_size 16 \
                --val_size 128 \
                --model_path=/app/ckpt/model_amazon.pt
              echo 'üìÇ Checking output directories...'
              ls -la /app/results
              ls -la /app/plots
            "

      # 6Ô∏è‚É£ Run decoder
      - name: Run decoder in Docker container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -e PYTHONUNBUFFERED=1 \
            samribahta/decoder-image:latest \
            bash -c "
              set -e
              echo 'üöÄ Starting decoder run on Amazon dataset...'
              python -m subgraph_mining.decoder \
                --dataset=amazon0302.pkl \
                --n_trials=200 \
                --node_anchored \
                --model_path=/app/ckpt/model_amazon.pt \
                --out_path=/app/results/amazon_patterns.pkl \
                --graph_type=directed
              echo 'üìÇ Checking output directories...'
              ls -la /app/plots/cluster
              ls -la /app/results
            "

      # 7Ô∏è‚É£ Upload results as artifact
      - name: Upload plots and results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: amazon-decoder-results
          path: |
            plots/
            results/
            ckpt/
          retention-days: 30
          if-no-files-found: warn

      # 8Ô∏è‚É£ Upload logs
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: amazon-decoder-logs
          path: |
            *.log
            *.err
          retention-days: 7
          if-no-files-found: ignore
