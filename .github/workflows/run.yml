name: Run Decoder

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  run-decoder:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      # 1️. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️. Download Amazon dataset from GitHub Release
      - name: Fetch amazon0302.pkl from GitHub Release
        run: |
          echo " Downloading amazon0302.pkl from GitHub Releases..."
          wget -O amazon0302.pkl https://github.com/Samrawitgebremaryam/neural-subgraph-matcher-miner/releases/download/v1.0/amazon0302.pkl
          
          echo " Verifying downloaded file..."
          file amazon0302.pkl

          FILE_SIZE=$(stat -c%s amazon0302.pkl)
          echo "File size: $FILE_SIZE bytes"

          if [ $FILE_SIZE -lt 100000 ]; then
            echo " ERROR: amazon0302.pkl is too small. Likely not downloaded correctly!"
            exit 1
          fi

          if file amazon0302.pkl | grep -Eq "HTML|ASCII|Unicode"; then
            echo " ERROR: amazon0302.pkl is not a valid binary file!"
            exit 1
          fi
          echo " amazon0302.pkl verified as binary."

      # 3️. Pull Docker image
      - name: Pull prebuilt Docker image
        run: |
          echo " Logging into Docker Hub..."
          docker login -u samribahta -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          echo " Pulling latest decoder image..."
          docker pull samribahta/decoder-image:latest

      # 4️. Create output directories
      - name: Create output directories
        run: |
          mkdir -p ${{ github.workspace }}/plots/cluster
          mkdir -p ${{ github.workspace }}/results
          mkdir -p ${{ github.workspace }}/ckpt
          chmod -R 777 ${{ github.workspace }}/plots
          chmod -R 777 ${{ github.workspace }}/results
          chmod -R 777 ${{ github.workspace }}/ckpt


      # 5️. Run matcher (train model)
      - name: Run matcher in Docker container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -e PYTHONUNBUFFERED=1 \
            samribahta/decoder-image:latest \
            bash -c "
              set -e
              echo ' Starting matcher run on Amazon dataset...'
              python -m subgraph_matching.train \
                --dataset=graph \
                --graph_pkl_path=amazon0302.pkl \
                --node_anchored \
                --batch_size 16 \
                --val_size 128 \
                --model_path=/app/ckpt/model_amazon.pt
              echo ' Checking output directories...'
              ls -la /app/results
              ls -la /app/plots
            "

      # 6️. Run decoder
      - name: Run decoder in Docker container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -e PYTHONUNBUFFERED=1 \
            samribahta/decoder-image:latest \
            bash -c "
              set -e
              echo ' Starting decoder run on Amazon dataset...'
              python -m subgraph_mining.decoder \
                --dataset=amazon0302.pkl \
                --n_trials=200 \
                --node_anchored \
                --model_path=/app/ckpt/model_amazon.pt \
                --out_path=/app/results/amazon_patterns.pkl \
                --graph_type=directed
              echo ' Checking output directories...'
              ls -la /app/plots/cluster
              ls -la /app/results
            "

      #  7️.Upload results as artifact (fixed version)
      - name: Compress and verify artifact
        if: always()
        run: |
          echo " Compressing results before upload..."
          zip -r amazon-decoder-results.zip plots results ckpt
          echo " Checking archive contents..."
          unzip -l amazon-decoder-results.zip
          echo "Compression done. Ready for upload."

      - name: Upload plots and results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: amazon-decoder-results
          path: |
            plots/
            results/
            ckpt/
          retention-days: 30
          if-no-files-found: warn

      # 8️. Upload logs
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: amazon-decoder-logs
          path: |
            *.log
            *.err
          retention-days: 7
          if-no-files-found: ignore
